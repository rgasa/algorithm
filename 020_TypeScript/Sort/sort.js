/* --------------------------------------------------------------------
 * name          : sort.js
 * version       : 1.00
 * description   : ソートのサンプルスクリプト。
 * author        : rogasawara
 * date          : 2021-04-08
 * update        :
 -------------------------------------------------------------------*/
{
    var Sort = /** @class */ (function () {
        // コンストラクタ
        function Sort() {
        }
        /**
         * bubble sort
         * @param nums
         * @returns nums
         */
        Sort.prototype.bubbleSort = function (nums) {
            // 配列の長さの取得
            var numsLen = nums.length;
            // カウンタの宣言
            var i = 0, j = 0;
            // 配列の要素数分ループ ex). nums = [0, 1, 2] -> ループ3
            for (; i < numsLen; i++) {
                // 配列の右端の要素からループを行う ex). nums = [0, 1, 2]
                for (j = numsLen - 1; j > i; j--) {
                    // 右端の要素と隣接する要素との比較
                    if (nums[j] < nums[j - 1]) {
                        // 隣接する要素の方が多き場合、要素の値を入替える
                        var tmp = nums[j - 1];
                        nums[j - 1] = nums[j];
                        nums[j] = tmp;
                    }
                }
            }
            return nums;
        };
        /**
         * quickSort
         * @param nums
         * @returns nums
         */
        Sort.prototype.quickSortV1 = function (nums) {
            function partition(start, end) {
                if (start >= end)
                    return;
                // グルーピングの軸となる値
                var pviot = nums[start];
                // グループの最も左端のIndex
                var left = start;
                for (var i = start + 1; i <= end; i++) {
                    if (nums[i] < pviot) {
                        // 配列の値の入れ替え
                        var temp_1 = nums[i]; //swap
                        nums[i] = nums[++left];
                        nums[left] = temp_1;
                    }
                }
                // 配列の値の入れ替え
                var temp = nums[left]; //swap
                nums[left] = nums[start];
                nums[start] = temp;
                // 再帰処理
                partition(start, left - 1);
                partition(left + 1, end);
            }
            // main処理の呼び出し
            partition(0, nums.length - 1);
            return nums;
        };
        return Sort;
    }());
    var targetNums = [99, 100, 101, 98, 208, 209, 210, 211, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 824, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 970, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 964, 965, 379, 380, 381, 382, 383, 168, 169, 170, 991, 992, 993, 994, 670, 671, 672, 673, 384, 385, 386, 387, 388, 389, 390, 966, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 391, 392, 254, 967, 968, 969, 409, 410, 411, 886, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 887, 888, 889, 890, 891, 892, 412, 413, 414, 415, 416, 417, 418, 419, 420, 130, 145, 146, 147, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 675, 676, 677, 678, 679, 718, 719, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 666, 667, 668, 669, 166, 167, 674, 437, 438, 439, 440, 441, 442, 443, 444, 445, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 705, 706, 446, 447, 472, 473, 474, 475, 476, 477, 478, 754, 755, 756, 757, 758, 126, 127, 128, 129, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 995, 996, 997, 998, 999, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 0, 1, 2, 3, 192, 193, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 830, 831, 832, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 194, 195, 196, 197, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 833, 982, 983, 984, 64, 65, 66, 985, 986, 987, 67, 68, 69, 70, 988, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 947, 948, 949, 950, 951, 952, 953, 954, 29, 30, 31, 32, 520, 521, 522, 523, 524, 742, 989, 198, 199, 200, 46, 47, 48, 990, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 148, 149, 150, 151, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 879, 880, 881, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 610, 611, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 612, 613, 614, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 201, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 925, 926, 927, 928, 929, 930, 860, 861, 862, 863, 864, 865, 866, 867, 882, 883, 884, 885, 893, 894, 895, 896, 897, 898, 899, 900, 901, 931, 575, 868, 869, 870, 628, 629, 630, 631, 632, 633, 634, 202, 203, 204, 205, 206, 207, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 759, 760, 761, 762, 782, 783, 784, 785, 786, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 71, 72, 73, 74, 75, 76, 77, 78, 79, 94, 95, 96, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 97, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 813, 814, 815, 816, 817, 825, 826, 827, 855, 818, 819, 820, 821, 822, 823, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 856, 857, 858, 859, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 828, 829, 955, 956, 957, 958, 959, 960, 961, 962, 963, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 873, 874, 875, 876, 877, 763, 764, 765, 766, 767, 768, 769, 770, 771, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 871, 872, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 878];
    var s = new Sort();
    // 開始時間
    var startTime = performance.now();
    // 実行
    console.log("bubbleSort : " + s.bubbleSort(targetNums));
    // 終了時間
    var endTime = performance.now();
    // 実行時間
    console.log(endTime - startTime);
    // 開始時間
    startTime = performance.now();
    // 実行
    console.log("quickSort : " + s.quickSortV1(targetNums));
    // 終了時間
    endTime = performance.now();
    // 実行時間
    console.log(endTime - startTime);
}
